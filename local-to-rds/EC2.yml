AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AppName:
    Type: String
  S3BucketName:
    Type: String
  KeyPairName:
    Type: String
  InstanceRole:
    Type: String
  VPC:
    Type: String
  DBURL:
    Type: String
  SubnetID:
    Type: String
Resources:
  EC2AccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance to RDS Access
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      IamInstanceProfile: !Ref InstanceRole
      ImageId: ami-04b9e92b5572fa0d1
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds: 
        - !Ref EC2AccessSecurityGroup
      SubnetId: !Ref SubnetID
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            apt-get update && apt-get install -y awscli && \
            cd /etc/ssl/private
            DOMAIN="example.com"
            if [ -z "$DOMAIN" ]; then
                echo "Usage: $(basename $0) $DOMAIN"
                exit 11
            fi

            fail_if_error() {
                [ $1 != 0 ] && {
                unset PASSPHRASE
                exit 10
                }
            }

            # Generate a passphrase
            export PASSPHRASE=$(head -c 500 /dev/urandom | tr -dc a-z0-9A-Z | head -c 128; echo)

            # Certificate details; replace items in angle brackets with your own info
            subj="
            C=RO
            ST=Bucharest
            O=test
            localityName=Bucharest
            commonName=$DOMAIN
            organizationalUnitName=departmentname
            emailAddress=admin@gmail.com
            "

            # Generate the server private key
            openssl genrsa -des3 -out ssl.key -passout env:PASSPHRASE 2048
            fail_if_error $?

            # Generate the CSR
            openssl req \
                -new \
                -batch \
                -subj "$(echo -n "$subj" | tr "\n" "/")" \
                -key ssl.key \
                -out ssl.csr \
                -passin env:PASSPHRASE
            fail_if_error $?
            cp ssl.key ssl.key.org
            fail_if_error $?

            # Strip the password so we don't have to type it every time we restart Apache
            openssl rsa -in ssl.key.org -out ssl.key -passin env:PASSPHRASE
            fail_if_error $?

            # Generate the cert (good for 10 years)
            openssl x509 -req -days 3650 -in ssl.csr -signkey ssl.key -out ssl.crt
            fail_if_error $?

            # need to install nginx and generate self signed ssl
            apt-get install -y nginx
            cat <<EOF > /etc/nginx/sites-enabled/default
            upstream example.com_backend  {
                server localhost:5000;
            }
            server {
                listen        443 ssl http2;
                listen   [::]:443 ssl http2;
                server_name example.com www.example.com;

                add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

                access_log /var/log/nginx/example.com_access.log;
                error_log /var/log/nginx/example.com_error.log error;

                ssl on;
                ssl_certificate /etc/ssl/private/ssl.crt;
                ssl_certificate_key /etc/ssl/private/ssl.key;
                ssl_session_timeout 5m;
                ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
                ssl_prefer_server_ciphers on;
                ssl_session_cache shared:SSL:10m;

                location /.well-known/acme-challenge {
                    alias /var/www/example.com/.well-known/acme-challenge;
                }

                location / {
                    gzip off;
                    proxy_set_header X-Forwarded-Ssl on;
                    client_max_body_size 50M;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$http_host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_set_header X-Frame-Options SAMEORIGIN;
                    proxy_pass http://example.com_backend;
                }
                location /test {
                    gzip off;
                    proxy_set_header X-Forwarded-Ssl on;
                    client_max_body_size 50M;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$http_host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_set_header X-Frame-Options SAMEORIGIN;
                    proxy_pass http://example.com_backend/test;
                }
            }
            EOF
            systemctl start nginx && \
            systemctl enable nginx && \
            systemctl stop nginx && systemctl start nginx
            # docker section
            apt-get remove -y docker docker-engine docker.io containerd runc && \
            apt-get update -y && \
            apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common \
            zip \
            unzip && \
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg |  apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
            apt-get update -y
            apt-get install -y docker-ce docker-ce-cli containerd.io
            systemctl start docker
            usermod -aG docker ubuntu
            cd ~/ && aws s3 cp s3://${S3BucketName}/myapp.zip ~/ && \ 
            unzip myapp.zip && cd myapp && \
            sed -i -r "s/localhost/${DBURL}/" .env && \
            docker build -t myapp . && \
            docker run -d -p 5000:5000 --restart always --name myapp myapp


Outputs:
  InstanceIP:
      Description: ec2 instance ip address
      Value: !GetAtt Ec2Instance.PublicIp
